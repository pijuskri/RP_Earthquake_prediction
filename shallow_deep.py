#For finding the most accurate stations
import pandas as pd

import wave_download_k
import wave_process_k
import lstm_model_k
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

from lstm_dataset_k import TimeSeriesDataset, DownSample
import models.lstm_model


def define_box_properties(plot_name, color_code, label):
    for k, v in plot_name.items():
        plt.setp(plot_name.get(k), color=color_code)

    # use plot function to draw a small line to name the legend.
    plt.plot([], c=color_code, label=label)
    plt.legend()

def plot_figure(shallow, deep):
    shallow_plot = plt.boxplot(shallow, positions=np.array(np.arange(len(shallow))) * 2.0 - 0.35,widths=0.6)
    deep_plot = plt.boxplot(deep, positions=np.array(np.arange(len(deep))) * 2.0 + 0.35,widths=0.6)

    define_box_properties(shallow_plot, '#D7191C', 'Shallow')
    define_box_properties(deep_plot, '#2C7BB6', 'Deep')

    #plt.figure()
    #ax = plt.gca()
    #ax.boxplot([shallow, deep])
    plt.title(f"Boxplot of deep and shallow model accuracy")
    plt.ylabel('Accuracy', fontsize="large")
    plt.xticks([1, 2], ["Shallow", "Deep"])
    plt.xlim(-2, 4)
    # set the limit for y axis
    #plt.ylim(0, 100)
    plt.show()
    plt.close()

def plot_sns(shallow, deep):
    shallow = np.array(shallow)
    deep = np.array(deep)
    df = pd.DataFrame(np.concatenate((shallow, deep)), columns=["Accuracy", "Precision", "Recall"])
    depth_labels = []
    for i in range(len(shallow)):
        depth_labels.append("shallow")
    for i in range(len(deep)):
        depth_labels.append("deep")
    df['Depth'] = depth_labels
    #df['Value'] = np.zeros((len(shallow)+len(deep)))
    df = pd.melt(df, id_vars=["Depth"], value_vars=["Accuracy", "Precision", "Recall"])
    sns.boxplot(x=df['Depth'], y=df['value'], hue=df['variable'])
    plt.title(f"Deep and shallow data performance metrics")
    plt.ylabel('Metric value', fontsize="large")
    plt.grid(axis='y')
    plt.legend(bbox_to_anchor=(0.7, 0.22))
    plt.show()
    plt.close()

selected_stations = ['BFZ', 'BKZ', 'DCZ', 'DSZ', 'HIZ', 'JCZ', 'KHZ', 'KUZ', 'LBZ',
                        'MSZ', 'MWZ', 'MXZ', 'NNZ', 'ODZ', 'OPRZ', 'OUZ', 'PUZ', 'PXZ', 'QRZ', 'RPZ',
                         'SYZ', 'THZ', 'TOZ', 'URZ', 'VRZ', 'WIZ', 'WKZ', 'WVZ']

shallow_loc='./datasets/sets/dataset_shallow.pkl'
deep_loc='./datasets/sets/dataset_deep.pkl'
shared_loc='./datasets/sets/dataset.pkl'

#wave_download_k.preprocess(selected_stations, True)
#wave_process_k.deep_shallow_process(shallow_loc, deep_loc)
print("done with processing")
lstm_model_k.run(input_file=shallow_loc)
#lstm_model_k.run(input_file=deep_loc)

#models.lstm_model.run_model(shallow_loc)
#models.lstm_model.run_model(deep_loc)


def run_normal():
    wave_process_k.process()
    lstm_model_k.run(input_file=shared_loc)

def avg_acc_regular():
    out = []
    dataset = TimeSeriesDataset(input_file=shared_loc, transform=DownSample(1))
    print("finished dataset loading")
    print("dataset sizes", len(dataset))
    for i in range(20):
        print(f"Doing run {i}")
        out.append(lstm_model_k.run(input_file=shallow_loc, dataset=dataset, report_log=False))

    print(out)
    mean_info(out)
    out = np.array(out).transpose()

    np.save('normal_runs.npy', out)

def get_avg_acc():
    out_shallow = []
    out_deep = []
    dataset_shallow = TimeSeriesDataset(input_file=shallow_loc, transform=DownSample(1))
    dataset_deep = TimeSeriesDataset(input_file=deep_loc, transform=DownSample(1))
    print("finished dataset loading")
    print("dataset sizes", len(dataset_shallow), len(dataset_deep))
    for i in range(20):
        print(f"Doing run {i}")
        out_shallow.append(lstm_model_k.run(input_file=shallow_loc, dataset=dataset_shallow, report_log=False))
        out_deep.append(lstm_model_k.run(input_file=deep_loc, dataset=dataset_deep, report_log=False))

    print(out_shallow, out_deep)

    plot_sns(out_shallow, out_deep)

    out_shallow = np.array(out_shallow).transpose()
    out_deep = np.array(out_deep).transpose()

    print(out_shallow, out_deep)

    #out_shallow.tofile("shallow_run.txt", ',')
    #out_deep.tofile("deep_run.txt", ',')
    np.save('shallow_runs.npy', out_shallow)
    np.save('deep_runs.npy', out_deep)

    #plot_figure(out_shallow, out_deep)

def mean_info(data):
    data = np.array(data)
    print(np.std(data, axis=0))
    print(np.mean(data, axis=0))
    #print(np.std(out_deep[0]))
    #print(np.mean(out_shallow[0]))
    #print(np.mean(out_deep[0]))

#get_avg_acc()




def plot_stuff():
    #acc_shallow = [0.9092039800995025, 0.8805970149253731, 0.9036069651741293, 0.8818407960199005, 0.9098258706467661, 0.9197761194029851, 0.9166666666666666, 0.9067164179104478, 0.9110696517412935, 0.904228855721393]
    #acc_deep = [0.8917910447761194, 0.8911691542288557, 0.8774875621890548, 0.9228855721393034, 0.875, 0.931592039800995, 0.9017412935323383, 0.8986318407960199, 0.8905472636815921, 0.8588308457711443]

    #[0.9092039800995025, 0.8805970149253731, 0.9036069651741293, 0.8818407960199005, 0.9098258706467661, 0.9197761194029851, 0.9166666666666666, 0.9067164179104478, 0.9110696517412935, 0.904228855721393] [0.8917910447761194, 0.8911691542288557, 0.8774875621890548, 0.9228855721393034, 0.875, 0.931592039800995, 0.9017412935323383, 0.8986318407960199, 0.8905472636815921, 0.8588308457711443]

    #10 original run
    #shallow_metrics = [[0.9421461897356143, 0.9293051359516616, 0.9570628500311139], [0.8345256609642302, 0.7981142540210759, 0.895457373988799], [0.8951788491446345, 0.9355281207133059, 0.8487865588052271], [0.8566096423017108, 0.8720779220779221, 0.8357187305538271], [0.9097978227060654, 0.8752136752136752, 0.955818294959552], [0.929393468118196, 0.9383735705209657, 0.9191039203484754], [0.9337480559875583, 0.9462227912932138, 0.9197261978842564], [0.9200622083981338, 0.901307966706302, 0.9433727442439328], [0.8945567651632971, 0.8773809523809524, 0.9172370877411326], [0.9278382581648522, 0.9220380601596071, 0.9346608587429994]]
    #deep_metrics = [[0.8653188180404354, 0.8452941176470589, 0.8942128189172371], [0.9175738724727839, 0.9116564417177914, 0.9247044181705041], [0.8814930015552099, 0.897020725388601, 0.8618543870566272], [0.9104199066874028, 0.9441077441077441, 0.8724331051649036], [0.9200622083981338, 0.895662368112544, 0.9508400746733043], [0.9241057542768274, 0.9272727272727272, 0.9203484754200373], [0.913841368584759, 0.8958333333333334, 0.9365276913503423], [0.8818040435458787, 0.9305263157894736, 0.8251400124455507], [0.8808709175738725, 0.8700120918984281, 0.895457373988799], [0.8755832037325039, 0.9363702096890817, 0.805849408836341]]

    #imbalanced run
    #shallow_metrics = [[0.8018067341910758, 0.8697986577181208, 0.7097480832420592], [0.8146728716123733, 0.8652256834075016, 0.7453450164293538], [0.813851628798248, 0.8882113821138211, 0.7179627601314348], [0.8023542294004927, 0.8645970937912814, 0.7168674698795181], [0.8157678620312072, 0.8851035404141616, 0.7256297918948521], [0.8256227758007118, 0.9102829537612146, 0.7223439211391018], [0.8009854913769504, 0.8631857237276933, 0.7152245345016429], [0.8015329865863674, 0.8586319218241042, 0.7217962760131434], [0.8075554338899534, 0.8587859424920128, 0.7360350492880613], [0.8020804817957843, 0.8769651401230348, 0.7026286966046003], [0.8081029290993704, 0.9038047379755922, 0.6894852135815991], [0.8182315904735834, 0.9080056179775281, 0.708105147864184], [0.7985217629345743, 0.851159793814433, 0.7234392113910186], [0.8105666575417465, 0.8910344827586207, 0.7075575027382256], [0.8018067341910758, 0.8461055276381909, 0.7376779846659365], [0.8018067341910758, 0.8874824191279888, 0.6911281489594743], [0.8168628524500411, 0.884896872920825, 0.7283680175246441], [0.8056392006569942, 0.900286944045911, 0.6872946330777656], [0.8237065425677526, 0.8945260347129506, 0.7338444687842278], [0.8094716671229126, 0.8880494505494505, 0.708105147864184]]
    #deep_metrics = [[0.8653161784834382, 0.9376640419947506, 0.7825848849945235], [0.8456063509444293, 0.8787515006002401, 0.8017524644030668], [0.8554612647139338, 0.913375796178344, 0.7853231106243155], [0.8565562551327676, 0.9151785714285714, 0.7858707557502739], [0.853271283876266, 0.9145244215938303, 0.7792990142387732], [0.8469750889679716, 0.9312457454050375, 0.7491785323110625], [0.8494388174103477, 0.9126778783958602, 0.7727272727272727], [0.8560087599233507, 0.9140127388535032, 0.7858707557502739], [0.846701341363263, 0.8781362007168458, 0.8050383351588171], [0.8502600602244731, 0.8827049670855776, 0.8077765607886089], [0.8447851081303038, 0.9111691704768126, 0.7639649507119387], [0.8497125650150561, 0.9388316151202749, 0.7480832420591457], [0.853271283876266, 0.904642409033877, 0.7897042716319824], [0.8456063509444293, 0.8871165644171779, 0.791894852135816], [0.860936216808103, 0.9218950064020487, 0.7886089813800657], [0.8590199835751438, 0.9259259259259259, 0.78039430449069], [0.8590199835751438, 0.9167196439923713, 0.7897042716319824], [0.8527237886668492, 0.9060529634300126, 0.7869660460021906], [0.8562825075280591, 0.945242984257358, 0.7562979189485214], [0.8620312072269367, 0.9281088082901554, 0.7847754654983571]]

    shallow_metrics = [[0.8605806957886477, 0.8996519721577726, 0.8116169544740973], [0.8728747057284855, 0.9326047358834244, 0.8037676609105181], [0.8736594297671986, 0.9244946492271106, 0.8137100994243851], [0.8668584880983521, 0.9138134592680047, 0.8100470957613815], [0.8752288778446247, 0.9503768844221105, 0.7917320774463632], [0.8681663614962072, 0.9017704169046259, 0.826268969126112], [0.8707821082919174, 0.9204747774480713, 0.8116169544740973], [0.8595343970703636, 0.9079572446555819, 0.8001046572475143], [0.8762751765629088, 0.9357575757575758, 0.8079539508110937], [0.8673816374574941, 0.9327990135635018, 0.7917320774463632], [0.8611038451477897, 0.9116945107398569, 0.7995813710099424], [0.8663353387392101, 0.9385964912280702, 0.7838827838827839], [0.8741825791263406, 0.9408138101109741, 0.7985347985347986], [0.8767983259220508, 0.9337349397590361, 0.8110936682365254], [0.8747057284854826, 0.945273631840796, 0.7953950811093669], [0.8739210044467696, 0.9175920514319111, 0.8215593929879644], [0.8582265236725085, 0.9222702035780382, 0.782312925170068], [0.8689510855349202, 0.9089327146171694, 0.8199895342752486], [0.8621501438660738, 0.9209245742092458, 0.7922553636839351], [0.865550614700497, 0.9106407995296885, 0.8105703819989535]]
    deep_metrics = [[0.850640857964949, 0.9161490683229814, 0.771847200418629], [0.8537797541198012, 0.9289340101522843, 0.7660910518053375], [0.8488098352079518, 0.9524779361846571, 0.7341705913134484], [0.83546952654983, 0.8573021181716833, 0.8048142333856619], [0.8540413287993722, 0.9273531269740998, 0.7681841967556253], [0.850640857964949, 0.932258064516129, 0.7561486132914704], [0.8543029034789432, 0.925251256281407, 0.7708006279434851], [0.8501177086058069, 0.9020432692307693, 0.7854526425954997], [0.8393931467433953, 0.8763784097504352, 0.7901622187336473], [0.851164007324091, 0.9408672798948752, 0.749345892203035], [0.8370389746272561, 0.8779342723004695, 0.7828362114076399], [0.8590112477112215, 0.9561170212765957, 0.7524856096284668], [0.851687156683233, 0.9231738035264484, 0.7671376242804814], [0.85090243264452, 0.92196349905601, 0.7666143380429095], [0.8527334554015171, 0.9505347593582888, 0.7441130298273155], [0.8548260528380853, 0.9307496823379924, 0.7666143380429095], [0.8532566047606591, 0.9255989911727617, 0.7681841967556253], [0.8527334554015171, 0.9207240948813983, 0.771847200418629], [0.8584880983520795, 0.9425064599483204, 0.7634746206174777], [0.8490714098875229, 0.9434840425531915, 0.7425431711145997]]

    mean_info(shallow_metrics)
    mean_info(deep_metrics)

    plot_sns(shallow_metrics, deep_metrics)

#plot_stuff()